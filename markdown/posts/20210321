Haskell FFI and Multithreading
2021/03/21
[Jan-willem De Bleser](http://www.thescrapyard.org)
20210321_haskellFfiSafe
TLDR: If you call into long-duration foreign functions from in Haskell and those
functions are marked `unsafe`, other Haskell threads will be paused a la Python's GIL.

Haskell foreign function calls imported via `foreign import ccall` can be marked as either
`safe` or `unsafe`, with complex performance implications. To quote the [Typed Pointers](http://book.realworldhaskell.org/read/interfacing-with-c-the-ffi.html#id655194)
section of Real Word Haskell:

> When making a foreign import declaration, we can optionally specify a
> "safety" level to use when making the call, using either the safe or unsafe
> keyword. A safe call is less efficient, but guarantees that the Haskell
> system can be safely called into from C. An "unsafe" call has far less
> overhead, but the C code that is called must not call back into Haskell. By
> default foreign imports are "safe", but in practice it is rare for C code to
> call back into Haskell, so for efficiency we mostly use "unsafe" calls.

However, to quote  [GHC Threading and FFI](http://www.cs.toronto.edu/~trebla/personal/haskell/ghc-conc-ffi.xhtml):

> Here is how GHC does it. So an OS thread with a capability is happily
> churning along Haskell threads. Suddenly one unbound Haskell thread
> safe-calls C. (The story of the bound case is in the next section.) This
> Haskell thread is suspended, this OS thread loses its capability and runs the
> C code, and some other OS thread gains the capability and picks up the other
> Haskell threads. Everyone is happy.
>
> An unsafe C call does not involve a transfer of capability. Therefore many
> other Haskell threads are put on hold as collateral damage.

This behaviour caused me a fair bit of grief, mainly because I was entirely
unaware of the nature of what was going on.  I've been working on some SDR
software in Haskell, and the
[rtlsdr](https://hackage.haskell.org/package/rtlsdr) package imports all its
calls as `unsafe`, such that data processing cannot be done concurrently with a
call to `readSync()` due to the capabilities effects discussed above. Modifying
the library to use safe imports makes it possible to run the `readSync()` in a
separate OS thread and pass the data via MVar, allowing real-time processing.
